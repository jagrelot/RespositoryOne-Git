<!--Copyright Â© 2018 Acumen Solutions, Inc. The Thorax Salesforce Metadata Utility was created by Acumen Solutions.
Except for the limited rights to use and make copies of the Software as provided in a License Agreement, all rights are reserved. -->
<project name="std" basedir="." xmlns:sf="antlib:com.salesforce">

	<target name="clearTemp">
		<delete dir="${root}/temp"/>
		<sleep seconds="3"/>
     	<mkdir dir="${root}/temp"/>
    </target>

    <target name="clearSrc">
    	<delete dir="${root}/src"/>
    	<sleep seconds="3"/>
    	<mkdir dir="${root}/src"/>
    </target>

    <target name="deleteTemp">
        <delete dir='${root}/temp'/>
        <delete file='${root}/standardTypes.csv'/>
    </target>

    <target name="describeMetadata">
   		<echo>Describing Metadata...</echo>
		<sf:describeMetadata username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" resultFilePath="${root}/describe.txt" apiVersion="${sf.apiVersion}"/>
		<exec executable="python3" failonerror="true">
    		<arg line="scripts/std/describe.py ${rootArg}" />
    	</exec>
    </target>

    <target name="downloadIndex">
    	<if>
    		<not>
        		<isset property="sf.folder"/>
    		</not>
    		<then>
        		<property name="sf.folder" value=""/>
				<property name="sf.temp" value=""/>
    		</then>
			<else>
				<property name="sf.temp" value="Temp"/>
			</else>
		</if>
		<if>
 			<equals arg1="${sf.folder}" arg2=""/>
 			<then>
   				<echo>Downloading Metadata Index of: ${sf.metadataType}</echo>
 			</then>
 			<else>
   				<echo>Downloading Metadata Index of: ${sf.metadataType} Folder: ${sf.folder}</echo>
 			</else>
		</if>
		<sf:listMetadata username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}" folder="${sf.folder}" resultFilePath="${root}/temp/${sf.temp}${sf.metadataType}.${sf.suffix}" apiVersion="${sf.apiVersion}"/>
    </target>


    <target name="buildPackageOrg">
    	<exec executable="python3" failonerror="true">
    		<arg line="scripts/std/packageorg.py ${rootArg} ${sf.apiVersion}" />
    	</exec>
	</target>

    <target name="buildPackageDir">
        <exec executable="python3" failonerror="true">
            <arg line="scripts/std/packagedir.py -i ${rootArg}/deploy -v ${sf.apiVersion}" />
        </exec>
    </target>

	<target name="processFolder">
    	<exec executable="python3" failonerror="true">
    		<arg line="scripts/std/folder.py ${rootArg}" />
    	</exec>
	</target>


	<target name="retrieveMetadata">
		<sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" retrieveTarget="${root}/src" unpackaged="${root}/src/package.xml" apiVersion="${sf.apiVersion}" pollWaitMillis="${sf.pollWaitMillis}" maxPoll="${sf.maxPoll}"/>
    </target>


    <target name="loopThroughFolders">
    	<loadfile property="file" srcfile="${root}/temp/${dir}.processed"/>

    	<for param="line" list="${file}" delimiter="${line.separator}">
  			<sequential>
        		<antcall target="std.downloadIndex">
    	      		<param name="sf.metadataType" value="${dir}"/>
    	      		<param name="sf.suffix" value="@{line}"/>
    	      		<param name="sf.folder" value="@{line}"/>
    			</antcall>
      		</sequential>
 		</for>

 		<delete file="${root}/temp/${dir}.processed"/>
 	</target>

 	<target name="processFlows">
 		<mkdir dir="${root}/temp/FlowDefinitions"/>
		<sf:bulkRetrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" metadataType="FlowDefinition" retrieveTarget="${root}/temp/FlowDefinitions" batchSize="10000" apiVersion="${sf.apiVersion}"/>

		<exec executable="python3" failonerror="true">
    		<arg line="scripts/std/flow.py ${rootArg}" />
    	</exec>
 	</target>

    <target name="processSharingRules">
        <mkdir dir="${root}/temp/SharingRules"/>
        <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" metadataType="SharingRules" retrieveTarget="${root}/temp/SharingRules" batchSize="10000" apiVersion="${sf.apiVersion}"/>

        <exec executable="python3" failonerror="true">
            <arg line="scripts/std/sharing.py ${rootArg}" />
        </exec>
    </target>

    <target name="deleteActiveFlows">
        <if>
            <available file="${root}/deploy/flows" type="dir"/>
            <then>
                <mkdir dir="${root}/temp/FlowDefinitions"/>
                <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" metadataType="FlowDefinition" retrieveTarget="${root}/temp/FlowDefinitions" batchSize="10000" apiVersion="${sf.apiVersion}"/>

                <exec executable="python3" failonerror="true">
                    <arg line="scripts/std/removeactiveflows.py ${rootArg}" />
                </exec>
            </then>
            <else>
                <echo>No flows found</echo>
            </else>
        </if>
    </target>

 	<target name="processSVSets">
 		<exec executable="python3" failonerror="true">
    		<arg line="scripts/std/svset.py ${rootArg}" />
    	</exec>
 	</target>

    <target name="processTranslations">
        <exec executable="python3" failonerror="true">
            <arg line="scripts/std/translations.py ${rootArg}" />
        </exec>
    </target>

    <target name="processObjectTranslations">
        <exec executable="python3" failonerror="true">
            <arg line="scripts/std/objecttranslations.py ${rootArg}" />
        </exec>
    </target>

 	<target name="processAllFolders">
 		<antcall target="std.downloadIndex">
    	      <param name="sf.metadataType" value="DashboardFolder"/>
    	      <param name="sf.suffix" value="folder"/>
    	</antcall>

    	<antcall target="std.processFolder"/>

    	<antcall target="std.loopThroughFolders">
    		<param name="dir" value="Dashboard"/>
    	</antcall>

		<antcall target="std.processFolder"/>


    	<antcall target="std.downloadIndex">
    	      <param name="sf.metadataType" value="DocumentFolder"/>
    	      <param name="sf.suffix" value="folder"/>
    	</antcall>

    	<antcall target="std.processFolder"/>

    	<antcall target="std.loopThroughFolders">
    		<param name="dir" value="Document"/>
    	</antcall>

		<antcall target="std.processFolder"/>


		<antcall target="std.downloadIndex">
    	      <param name="sf.metadataType" value="EmailFolder"/>
    	      <param name="sf.suffix" value="folder"/>
    	</antcall>

    	<antcall target="std.processFolder"/>

    	<antcall target="std.loopThroughFolders">
    		<param name="dir" value="EmailTemplate"/>
    	</antcall>

		<antcall target="std.processFolder"/>


		<antcall target="std.downloadIndex">
    	      <param name="sf.metadataType" value="ReportFolder"/>
    	      <param name="sf.suffix" value="folder"/>
    	</antcall>

    	<antcall target="std.processFolder"/>

    	<antcall target="std.loopThroughFolders">
    		<param name="dir" value="Report"/>
    	</antcall>

		<antcall target="std.processFolder"/>
 	</target>

    <target name="buildMetadataIndex">
        <loadfile property="standardTypes" srcfile="${root}/standardTypes.csv"/>
        <for param="line" list="${standardTypes}" delimiter="${line.separator}">
            <sequential>
                <propertyregex property="metadataType"
                    override="yes"
                    input="@{line}"
                    regexp="^(.+?),(.+)"
                    select="\1"/>
                <propertyregex property="suffix"
                    override="yes"
                    input="@{line}"
                    regexp="^(.+?),(.+)"
                    select="\2"/>
                <trycatch>
                    <try>
                        <antcall target="std.downloadIndex">
                            <param name="sf.metadataType" value="${metadataType}"/>
                            <param name="sf.suffix" value="${suffix}"/>
                        </antcall>
                    </try>
                    <catch>
                        <echo>Failed to retrieve metadata index for: ${metadataType}</echo>
                    </catch>
                </trycatch>
            </sequential>
        </for>
    </target>

    <target name="generateCache">
        <delete file="cache.properties"/>
        <copy todir="cachetemp" failonerror="false">
            <fileset dir="${root}/src">
                <modified />
            </fileset>
        </copy>
        <delete dir="cachetemp"/>
    </target>

    <target name="generateBuild">
        <delete dir = "${root}/deploy"/>
        <for param = "theFile" >
            <path>
                <fileset dir ="${root}/src" id = "modFileSet">
                    <modified/>
                </fileset>
            </path>
            <sequential>
                <echo message = "@{theFile}"/>
                <var name="varTheFile" unset="true"/>
                <basename file="@{theFile}" property="varTheFile" />
                <if>
                    <contains string="@{theFile}" substring="aura"/>
                    <then>
                        <propertyregex 
                            property="lightningPackage"
                            input="@{theFile}"
                            regexp="aura\/([^\/]*)\/"
                            select="\1"
                            casesensitive="yes" 
                            override = "true"/>
                        <echo message = "${lightningPackage}"/>
                        <copy todir = "${root}/deploy">
                            <fileset dir = "${root}/src">
                                <filename name = "**/*${lightningPackage}/*" />
                            </fileset>
                        </copy>
                    </then>
                    <else>
                        <copy todir = "${root}/deploy" failonerror = "false">
                            <fileset dir = "${root}/src">
                                <filename name = "**/*${varTheFile}-meta.xml" />
                            </fileset>
                        </copy>
                        <copy todir = "${root}/deploy">
                            <fileset dir = "${root}/src">
                                <filename name = "**/*${varTheFile}" />
                            </fileset>
                        </copy>
                    </else>
                </if>
            </sequential>
        </for>
        <delete file = "${root}/deploy/package.xml"/>
        <antcall target="std.deleteActiveFlows"/>
        <antcall target="std.buildPackageDir"/> 
    </target>

    <target name="deploy">
        <sf:deploy 
            username="${sf.username}" 
            password="${sf.password}" 
            serverurl="${sf.serverurl}"
            checkOnly="${sf.checkonly}" 
            testLevel="${sf.testLevel}"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            deployRoot="${root}/deploy"/>
    </target>

</project>
